{"pageProps":{"post":{"title":"Python Coroutines!?!?","date":"2023-06-11","slug":"py-generator-couroutines","content":"<p>Python supports generators which allow you to <code>.send()</code> and recieve (via <code>next(...)</code>) values. They are kind of like channels since they don't block until you send or recieve.</p>\n<p>In the code below, we use callbacks (called aperiodically in a separate thread) to send values to our channel. Simultaneously, we try to consume those values, which should be allowed because generators and our <code>coroutine</code> are non-blocking.</p>\n<pre><code class=\"language-python\">import time, threading\n\ndef channel(x=\"Hello\"):\n    while True:\n        x = yield x\n\ndef make_coroutine(callback):\n    def coroutine():\n        callback()\n        threading.Timer(1, coroutine).start()\n    return coroutine\n\ndef make_callback():\n    chan = channel()\n    # prime the channel\n    next(chan)\n\n    def callback():\n        print(\"Calling!\")\n        chan.send(\"Hello world!\")\n    \n    return chan, callback\n\ndef main():\n    chan, callback = make_callback()\n    coroutine = make_coroutine(callback)\n    coroutine()\n    for i in chan:\n        if i is not None:\n            print(i)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n<p>And yet, this approach doesn't work as expected! One of three things happens:</p>\n<ol>\n<li><code>ValueError: generator already executing</code></li>\n<li>only None values are output from the channel</li>\n</ol>\n<p>Why doesn't this work? email me if you have an answer.</p>"},"morePosts":[{"title":"Try again with sudo: _sudo","slug":"_sudo"},{"title":"Roku & Competition","slug":"competition-focus"},{"title":"Einsum","slug":"einsum"},{"title":"Entropy","slug":"entropy"},{"title":"Incl/Exclusion","slug":"inclusion-exclusion"},{"title":"Python Coroutines!?!?","slug":"py-generator-couroutines"}]},"__N_SSG":true}